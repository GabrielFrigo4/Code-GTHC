* Atividade Pratica!

** (1) Heap Memory
É uma atividade pratica.
 - [[https://www.gnu.org/software/libc/manual/html_node/Unconstrained-Allocation.html][Allocation]]
 - [[https://www.gnu.org/software/libc/manual/html_node/Summary-of-Malloc.html][Summary of malloc-Related Functions]]

** (2) Stack Memory
É uma atividade de analise.
 - [[https://www.gnu.org/software/c-intro-and-ref/manual/html_node/Stack.html][The Stack, And Stack Overflow]]

** (3) Buffer Overflow
É uma atividade de analise.
 - [[https://www.youtube.com/watch?v=fjMrDDj47E8][Why do hackers love strings?]]

** Referências de C
 - [[https://www.gnu.org/software/libc/manual/html_node/][The GNU C Library]]
 - [[https://www.gnu.org/software/gnu-c-manual/gnu-c-manual.html][The GNU C Reference Manual]]
 - [[https://gcc.gnu.org/onlinedocs/gcc/C-Implementation.html][C Implementation-Defined Behavior]]

** Ferramentas
 - [[https://godbolt.org/][Compiler Explorer]]

* (1) Heap Memory - O Jogo da Memorização

Todo mundo tem um amigo meio "lé-lé da cuca", e você não é diferente. Conheça o Joãozinho: ele é o seu amigo mais doido da face da Terra, e, como era de se esperar, ele te desafiou para um desafio sem sentido aparente.

Só para você entender com quem está lidando, ele é um daqueles caras que decora centenas de dígitos de Pi porque acha divertido... Vai entender!

Bom, o grande desafio dele é você ganhar no X1 contra ele na memorização, e vai funcionar assim: ele vai falar o máximo de números que conseguir, e você deve memorizar na ordem que ele falar, até quando ele cansar – ou seja, pode ser com 5 números ou centenas... Após ele dizer os números, ele vai querer checar se você realmente memorizou, então fará algumas perguntas, como "Qual número está na posição 5?" ou "Quais números estão entre as posições 5 e 7?". Se você conseguir acertar tudo, ele vai te dar um bombom de chocolate de uma marca duvidosa; se você perder, ele vai querer te levar para a UFABC (medo genuíno). Aparentemente, isso não é um bom acordo, mas ele te deixou usar absolutamente tudo ao seu alcance para te ajudar, como um amigo, um parente, papel e lápis, ou um punhado de silício que você chama de computador... O problema é que ele não manja da computaria e não sabe que uma "pedra" (o seu PC/notebook) é capaz de armazenar informações, sabe? E como você quer esse bombom a qualquer custo, pretende criar um código para te ajudar nessa jornada assustadora!

Como você teve uma ideia de jerico de aprender C, usará essa linguagem para derrotar o Joãozinho. O problema é que não existem estruturas de dados prontas em C, como listas ou vetores dinâmicos... Então, use as ferramentas básicas do C a seu favor!

* (2) Stack Memory - Mais um pra BCC...

Joãozinho, após perder miseravelmente para você, decidiu aprender as técnicas mágicas de conversar com as pedras de silício e obter resultados desejáveis.

Com isso, ele decidiu propor outro desafio. Para esse desafio, ele criou um SUPER CÓDIGO EM C. O desafio é o seguinte: Joãozinho vai escolher um número positivo qualquer, e você precisará adivinhar qual é o número escolhido por ele. Você só tem uma chance. Para isso, ele criou um código que será o juiz, garantindo que ninguém possa trapacear (mudar o número depois da escolha final ou espiar o número escolhido previamente). Bom, é isso que ele acredita, pelo menos...

E como Joãozinho é muito orgulhoso, ele fez questão de mostrar para você o código que criou e, ainda por cima, o comando que usou para compilar e executar o código. Já que ca cabeça dele, ele acha que está ensinando algo a você, rsrs.

A sua missão é simples: Você precisa vencê-lo novamente, simplesmente para mostrar a ele que a vida não é fácil e que, se existe um código em C, também existe uma maneira de burlá-lo.

** Código C
#+BEGIN_SRC c
#include <stdio.h>

long get_choice() {
	long choice;
	long input;

	while(scanf("%li", &input) != EOF && input > -1) {
		choice = input;
	}
	return choice;
}

int main(void) {
	long choice_joaozinho = get_choice();
	long choice_sua = get_choice();

	if (choice_joaozinho == choice_sua) {
		printf("Acertou!! é %li! Mas COMO???", choice_joaozinho);
	}
	else {
		printf("Errou! Era %li e não %li...", choice_joaozinho, choice_sua);
	}
	return 0;
}
#+END_SRC

** Comando Shell
#+BEGIN_SRC sh
gcc -O0 -std=c17 <arquivos *.c> -o <executável>
#+END_SRC

* (3) Buffer Overflow - O Game Dev

Joãozinho está puto com as duas derrotas consecutivas, isso nunca tinha acontecido antes. Porém, Joãozinho é persistente, ele não vai parar até se tornar um mestre na arte da computação, e agora, ele sabe que não basta apenas escrever o código, é importante saber como compilá-lo também (`-O0` vs `-O3` na otimização e segurança).

E como de costume, Joãozinho te desafiou no X1 de novo... E agora vai ser no seu novo videogame, que funciona da seguinte maneira: você escolhe um nome, e se quiser, pode mudar o seu poder e a sua vida. Porém, a sua vida e o poder devem ser ambos números positivos, e a multiplicação deles não deve passar dos `1e5` (`100.000`). E como de costume, se você ganhar, irá receber um presente misterioso; se perder, irá para a UFABC.

Bom, é claro que o código do Joãozinho tem falhas, já que foi feito em C (mesmo usando a opção ~-O3~ e tendo todas as flags de segurança ativadas). Ache essas falhas e vença dele no X1!

** Código C
#+BEGIN_SRC c
#include <stdio.h>
#include <stdlib.h>
#include <string.h>

typedef struct player_t {
	char name[16];
	int health;
	int power;
} player_t;

void player_print(player_t *player) {
	printf("\n######## PLAYER ########\nname: %s\nhealth: %i\npower: %i\n########################\n\n", player->name, player->health, player->power);
}

void player_init(player_t *player) {
	player->health = 1e3;
	player->power = 1e2;
	strcpy(player->name, "Sem Nome");
}

void player_setup(player_t *player) {
	printf("Digite o nome do jogador: ");
	if(scanf(" %[^\n]%*c", player->name) == EOF) {
		exit(-1);
	}
	player_print(player);

	int edit;
	printf("Se quiser editar o ataque ou a vida coloque \"1\", senão coloque \"0\" (ataque * vida <= 1e5): ");
	if(scanf("%i", &edit) == EOF) {
		exit(-1);
	}
	if (!edit) {
		return;
	}

	do {
		printf("Vida: ");
		if(scanf("%i", &player->health) == EOF) {
			exit(-1);
		}
		printf("Ataque: ");
		if(scanf("%i", &player->power) == EOF) {
			exit(-1);
		}
	} while (player->health * player->power > 1e5 || player->health <= 0 || player->power <= 0);
}

void player_battle(player_t *player1, player_t *player2) {
	do {
		player1->health -= player2->power;
		player2->health -= player1->power;

		printf("!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!\n");
		player_print(player1);
		player_print(player2);
	} while(player1->health > 0 && player2->health > 0);

	if (player2->health <= 0) {
		printf("Joãozinho Ganhou!! Ele é muito bom msm");
	}
	else if (player1->health <= 0) {
		printf("Aff, você ganhou... Como??");
	}
}

int main(void) {
	player_t player_joaozinho;
	player_t player_voce;

	player_init(&player_joaozinho);
	player_init(&player_voce);

	printf("$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$\n");
	player_print(&player_joaozinho);
	player_setup(&player_joaozinho);
	player_print(&player_joaozinho);

	printf("$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$\n");
	player_print(&player_voce);
	player_setup(&player_voce);
	player_print(&player_voce);

	printf("$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$\n\n");
	player_battle(&player_joaozinho, &player_voce);
	return 0;
}
#+END_SRC

** Código Shell
#+BEGIN_SRC sh
gcc -O3 -std=c17 <arquivos *.c> -o <executável>
#+END_SRC

* Comando de Compilação

** Shell
#+BEGIN_SRC sh
gcc -O3 -std=c17 <arquivos *.c> -o <executável>
#+END_SRC

** Make
#+BEGIN_SRC makefile
default:
	gcc -O3 -std=c17 <arquivos *.c> -o <executável>
#+END_SRC
